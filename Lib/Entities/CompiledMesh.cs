using System;
using System.Collections.Generic;
using OpenTK.Graphics.OpenGL;




//Copyright (C) 2016 Wolfgang Nagl

// This program is free software; you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by  the Free Software Foundation; either version 2 of the License, or (at  your option) any later version.
// This program is distributed in the hope that it will be useful, but  WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General Public License for more details.
#if LONGDEF
using IndexType = System.Int32;
#else
using IndexType = System.UInt16;
#endif

namespace Drawing3d
{
    /// <summary>
    /// overrides a mesh and adds a field <b>Snabobject</b>, which holds the index of a <see cref="SnappItem"/> in the <see cref="Selector.StoredSnapItems"/> list.
    /// It will be produced, when ever a <see cref="Selector.SnapMesh"/> will be generated by <see cref="Selector.RefreshSnapBuffer"/>.
    /// </summary>
    [Serializable]
   public sealed class CompiledMesh:Mesh 
    {
        /// <summary>
        /// the index of a <see cref="SnappItem"/> in the <see cref="Selector.StoredSnapItems"/> list.
        /// </summary>
        public int SnapObject = -1;
        /// <summary>
        /// is the constructor with <b>indices</b>, <b>positions</b>, <b>normal vectors</b>, <b>texture coordinates</b> and <b>colors</b>. Three sequential indices determe a triangle
        /// Points[indices[i]], Points[indices[i+1]] and Points[indices[i+2]]. In every point a normal vector is given, which is responsible for the lightning.
        /// Texture are coordinates for a <see cref="Texture"/>. For every point you can define a color.
        /// </summary>
        /// <param name="Indices"> are the indices, who determ a triangle points[indices[i]], points[indices[i+1]] and points[indices[i+2]].</param>
        /// <param name="Positions">are the points of the mesh.</param>
        /// <param name="Normals">are the normals of the mesh.</param>
        /// <param name="TextureCoords">are texture coordinates.</param>
        /// <param name="Colors">are the colors.</param>
        public CompiledMesh(IndexType[] Indices, xyzf[] Positions, xyzf[] Normals, xyf[] TextureCoords, xyzf[] Colors) :base(Indices, Positions, Normals, TextureCoords, Colors)
        { }
    }
   

}
